plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
}
mainClassName='glous.kleebot.KleeBot'
repositories {
    maven{ url 'https://maven.aliyun.com/repository/central' }
    maven{ url 'https://maven.aliyun.com/repository/public' }
    maven{ url 'https://maven.aliyun.com/repository/gradle-plugin'}
    maven {
        url "https://packages.jetbrains.team/maven/p/skija/maven"
    }
        mavenCentral()
}

jar{
    manifest{
        attributes 'Main-Class': 'glous.kleebot.KleeBot'
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
task makeFullJar(type: Jar){
    group "KleeBot"
    manifest{
        attributes 'Main-Class': 'glous.kleebot.KleeBot'
    }
    baseName 'KleeBot_full'
    from 'build/classes/java/main'
    from 'src/main/resources'
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    destinationDirectory=file('build/release')
}

dependencies{
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'net.mamoe:mirai-core:2.9.2'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.3'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'com.github.oshi:oshi-core:6.1.5'
    implementation 'dnsjava:dnsjava:3.5.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    api 'org.jetbrains.skija:skija-windows:0.93.6'
    api 'org.jetbrains.skija:skija-linux:0.93.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}
task makeReleaseJar(type: Jar){
    group "KleeBot"
    manifest{
        attributes 'Main-Class': 'glous.kleebot.KleeBot'
    }
    project.configurations.runtimeClasspath.getDependencies().forEach(dependency->{
        System.out.println(dependency.getName())
    })
    baseName 'KleeBot'
    File sign=new File("src/main/resources/SIGN")
    if (!sign.exists())
    {
        sign.withWriter('utf-8'){writer->
            writer.write '@dev-000000'
        }
    }
    File date=new File("src/main/resources/BUILD").withWriter('utf-8'){writer->
        writer.write("Build at ")
        writer.write(new Date().toString())
        writer.write("\nOS: ")
        writer.write(System.getProperty("os.name"))
        writer.write("\nJDK: ")
        writer.write(System.getProperty("java.vendor"))
        writer.write(" ")
        writer.write(System.getProperty("java.version"))
        writer.write("\nARCH: ")
        writer.write(System.getProperty("os.arch"))
    }
    from 'build/classes/java/main'
    from 'src/main/resources'
    destinationDirectory=file('build/release')
}
makeReleaseJar.dependsOn(classes)
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Jar) { duplicatesStrategy = DuplicatesStrategy.INCLUDE }
task exportLibsManifest(){
    group "KleeBot"

}
task exportLibs(type: Copy){
    group "KleeBot"
    from configurations.runtimeClasspath
    into "build/deps/"
    into "build/all/dependencies/"
}
task exportBot(type: Copy){
    group "KleeBot"
    from "build/release/KleeBot.jar"
    into "build/all/"
}
task exportChores(type: Copy){
    group "KleeBot"
    from "LICENSE"
    from "README.md"
    from "scripts/"
    into "build/all/"
    into ("resourcePacks"){
        from "resourcePacks"
    }
}
task exportAll(type: Zip){
    group "KleeBot"
    archiveName "KleeBot-Release.zip"
    from "build/all/"
    destinationDir file("build")
}
exportAll.dependsOn([exportLibs,makeReleaseJar,exportBot,exportChores])
test {
    useJUnitPlatform()
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}